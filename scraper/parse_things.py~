'''This file reads from new_info.txt or asks for some file
and then populates a new text list with all the users in the topic.

TO DOs
URGENT:
Change nominations in that user file
Actually test this using a text file with random people in it.

Secondary:
Ensure that the user file is robust to changes.
Have an 'alias list' where everyone's alts can be recorded. 

Nice to have:
Eliminate duplicate names / 'Correct' a file or song name

'''

from sys import argv
from collections import defaultdict
import os
import string

# NOTE: Currently the nominations are in format game | track | link

def read_file(filename):
    '''Reads the files line by line,
Parses things the following way:
Checks to see if POSTED is next line, indicates username.
When the countdown is 0, it has reached the postnumber line'''
    users = defaultdict(list)


    #current_user = "Touka_Oone"
    post_number = ''
    #users[current_user]
    #Above three things are for debugging purposes only
    
    countdown = -1 # At -1 so it never hits 0 when decremented.
    with open(filename) as f:
        current = f.readline()
        while current != '':
            previous = current
            current = f.readline()
            atoms = current.split()

            if atoms != [] and atoms[0] == 'Posted' \
            and (atoms[-1] == 'AM' or atoms[-1] == 'PM'):
                current_user = previous.split()[0]
                users[current_user]
                #default dict initialization

                countdown = 4 # The post number comes 3 lines after
            countdown -= 1
            if countdown == 0 and len(atoms) != 0:
                post_number = atoms[0]
            elif len(atoms) == 0: 
                countdown += 1

            if '|' in atoms and atoms[-1] != 'quote':
                game, track, link = nomination(current, current_user)
                users[current_user].append((game, track, link, post_number))

    # print users
    
    return users
    
def nomination(line, user):
    '''Parsing each legal line as a nomination.'''
    item = line.split("|")
    item = [element.strip() for element in item]
    
    # Removing numbers from the start of people's nominations
    first,temp = item[0].split(" ")[0], item[0].split(" ")
    first = first.translate(string.maketrans("",""), 
                           string.digits)
    first = first.translate(string.maketrans("",""),  
                            string.punctuation)
#    temp = item[0].split(' ')
    if first == '':
        item[0] = " ".join(temp[1:])
    else:
        temp[0] = first
        item[0] = " ".join(temp)

    item = [x for x in item if x != '']
    game, track, link = '', '', ''
    if len(item) > 2:
        game, track, link = item[:3]
    elif len(item) == 2:
        game, track = item[:2]
        link = "LINK MISSING" 
    elif len(item) == 1:
        game = item[0]
        track = "TRACK MISSING"
        link = "LINK"
        print "WARNING!", user, " hasn't submitted a track!"


    return game, track, link

def write_to_file(users):
    '''Writes the user dict to all the files '''
    for element in users:
# Not yet implemented functionality for alt detection        
#        if element in alias(): 
#           pass
        if not os.path.exists('./users/'+ element +'.txt'):
            txt_file = open('./users/'+ element +'.txt', 'w')
        else:
            txt_file = open('./users/'+ element +'.txt', 'w')
            # Change to a when time for real thing
            # txt_file = open('./users/'+ element +'.txt', 'a')


        for item in users[element]:
            txt_file.write(item[0]+"\n")
            txt_file.write(item[1]+"\n")
            txt_file.write(item[2]+"\n")
            txt_file.write("\n")
            strange_things(users, element, item)
            
        txt_file.write("\n"+"="*10)

    txt_file.close()
    return None

def strange_things(users, element, item):
    '''Reports irregularities in nominations '''
    user_things = [part for part in item]
    if "TRACK MISSING" in user_things:
        print "Post number", item[3], "from", element, "is missing a track!"
    elif "LINK MISSING" in user_things:
        print "Post number", item[3], "from", element, "is missing a link"
    else:
        pass
            
def alias():
    '''Detects track names or alts via
some preset configuration file '''
    pass

if __name__ == "__main__":
    filename = ''
    if len(argv) > 1 and filename != 'prompt':
        script, filename = argv
    else:
        print "File? Default: new_info.txt"
        filename = raw_input('--> ')
        if filename == 'prompt' or '':
            filename = 'new_info.txt'
    users = read_file(filename)
    write_to_file(users)

    raise SystemExit
